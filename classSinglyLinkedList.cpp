///////////////////////////////////////////////////////////////////////////////
///         University of Hawaii, College of Engineering
/// @brief  ee205-Animal-Farm - EE 205 - Spr 2022
///
/// @file classSinglyLinkedList.cpp
/// @version 1.0
///
/// @author Xiaokang Chen <xiaokang@hawaii.edu>
/// @date   19_Apr_2022
///////////////////////////////////////////////////////////////////////////////


#include "classSinglyLinkedList.h"
#include "config.h"


//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Constructors ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
classSinglyLinkedList::classSinglyLinkedList() {



}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Constructors ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// List Modifying ///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classSinglyLinkedList::push_front( classNode* pNewNode ) {



}

void classSinglyLinkedList::insert_after( classNode* pCurrentNode, classNode* pNewNode ) {



}

classNode *classSinglyLinkedList::pop_front() noexcept {

    return nullptr;

}
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// List Modifying ///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Validation & Print /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classSinglyLinkedList::print() const noexcept {



}

bool classSinglyLinkedList::validate() const noexcept {

    return false;

}
//////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// Validation & Print /////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////