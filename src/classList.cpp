///////////////////////////////////////////////////////////////////////////////
///         University of Hawaii, College of Engineering
/// @brief  ee205-Animal-Farm - EE 205 - Spr 2022
///
/// @file classList.cpp
/// @version 3.0
///
/// @author Xiaokang Chen <xiaokang@hawaii.edu>
/// @date   19_Apr_2022
///////////////////////////////////////////////////////////////////////////////


#include "classList.h"
#include "config.h"


//////////////////////////////////////////////////////////////////////////////////////
////////////////////////// Static Public Member Functions ////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
classNode *classList::get_next( const classNode* pCurrentNode ) {

    if ( pCurrentNode == nullptr ) {

        throw out_of_range( PROGRAM_NAME ": pCurrentNode is = to nullptr" ) ;

    }

    return pCurrentNode -> pNext;

}
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////// Static Public Member Functions ////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// Public Member Functions ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
bool classList::empty() const noexcept {

    if ( pHead == nullptr) {

        return true ;

    }

    return false ;

}

unsigned int classList::size() const noexcept {

    return count ;

}

bool classList::isIn( classNode* pNode ) const {

    classNode* pCompareNode = pHead ;

    if ( pNode == nullptr ) {

        throw out_of_range( PROGRAM_NAME ": pNode is set to nullptr, please enter a proper node" ) ;

    }

    while ( pCompareNode != nullptr ) {

        if ( pNode == pCompareNode ) {

            return true ;

        }

        pCompareNode = pCompareNode -> pNext ;

    }

    return false ;

}

bool classList::isSorted() const noexcept {

    assert( validate() ) ;

    if ( count <= 1 ) {

        return true ;

    }

    for ( classNode* pI = pHead; pI -> pNext != nullptr; pI = pI -> pNext ) {

        if ( *pI > *pI -> pNext ) {

            return false ;

        }

    }

    return true ;

}

classNode *classList::get_first() const noexcept {

    return pHead ;

}
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// Public Member Functions ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Deletion //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classList::deleteAllNodes() noexcept {

    assert( validate() ) ;

    while ( pHead != nullptr ) {

        pop_front() ;

    }

    assert( validate() ) ;

    #ifdef DEBUG

        cout << PROGRAM_NAME << ": All Nodes have been deleted" << endl ;

    #endif

}
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Deletion //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
