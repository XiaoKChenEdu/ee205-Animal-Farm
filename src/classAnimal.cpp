///////////////////////////////////////////////////////////////////////////////
///         University of Hawaii, College of Engineering
/// @brief  ee205-Animal-Farm - EE 205 - Spr 2022
///
/// @file classAnimal.cpp
/// @version 3.0
///
/// @author Xiaokang Chen <xiaokang@hawaii.edu>
/// @date   20_Apr_2022
///////////////////////////////////////////////////////////////////////////////


#include "classAnimal.h"
#include "config.h"


///////////////////////////////// Public Attributes //////////////////////////////////
const string classAnimal::KINGDOM_NAME = "Animalia" ;
///////////////////////////////// Public Attributes //////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Constructors ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
classAnimal::classAnimal( const classWeight::t_weight newMaxWeight, const string &NewClassification, const string &NewSpecies ) : classNode(), weight( classWeight::POUND, newMaxWeight ) {

    if ( !validateClassification( NewClassification ) ) {

        throw logic_error( PROGRAM_NAME ": Your NewClassification is invalid" ) ;

    }

    if ( !validateSpecies( NewSpecies ) ) {

        throw logic_error( PROGRAM_NAME ": Your NewSpecies is invalid") ;

    }

    classification = NewClassification ;
    species        = NewSpecies        ;

    assert( classAnimal::validate() ) ;

}

classAnimal::classAnimal( const Gender newGender, const classWeight::t_weight newWeight, const classWeight::t_weight newMaxWeight, const string &NewClassification, const string &NewSpecies ) : classNode(), weight ( newWeight, newMaxWeight ) {

    if ( !validateClassification( NewClassification ) ) {

        throw logic_error( PROGRAM_NAME ": Your NewClassification is invalid" ) ;

    }

    if ( !validateSpecies( NewSpecies ) ) {

        throw logic_error( PROGRAM_NAME ": Your NewSpecies is invalid") ;

    }

    classification = NewClassification ;
    species        = NewSpecies        ;

    setGender( newGender ) ;

    assert( classAnimal::validate() ) ;

}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Constructors ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Getters ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
string classAnimal::getKingdom() const noexcept {

    return KINGDOM_NAME ;

}

string classAnimal::getClassification() const noexcept {

    return classification ;

}

string classAnimal::getSpecies() const noexcept {

    return species ;

}

Gender classAnimal::getGender() const noexcept {

    return gender ;

}

classWeight::t_weight classAnimal::getWeight() const noexcept {

    return weight.getWeight() ;

}
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Getters ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Setters ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classAnimal::setWeight(const classWeight::t_weight newWeight) {

    weight.setWeight( newWeight ) ;

    assert( classAnimal::validate() ) ;

}

void classAnimal::setGender(const Gender newGender) {

    if ( gender != Gender::UNKNOWN_GENDER ) {

        throw logic_error( PROGRAM_NAME ": Gender was already set, you may not change it" ) ;

    }

    gender = newGender ;

    assert( classAnimal::validate() ) ;

}
//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////// Setters ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Validation //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
bool classAnimal::validateClassification(const string &checkClassification) noexcept {

    if ( checkClassification.empty() ) {

        return false ;

    }

    return true ;

}

bool classAnimal::validateSpecies(const string &checkSpecies) noexcept {

    if ( checkSpecies.empty() ) {

        return false ;

    }

    return true ;

}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// Validation //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Validation & Print //////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classAnimal::print() const noexcept {

    PRINT_HEADING_FOR_PRINT ;

    classNode::print() ;

    FORMAT_LINE_FOR_PRINT("Animal", "this"           ) << this << endl ;
    FORMAT_LINE_FOR_PRINT("Animal", "Kingdom"        ) << KINGDOM_NAME << endl ;
    FORMAT_LINE_FOR_PRINT("Animal", "Classification" ) << classification << endl ;
    FORMAT_LINE_FOR_PRINT("Animal", "Species"        ) << species << endl ;
    FORMAT_LINE_FOR_PRINT("Animal", "Gender"         ) << gender << endl ;
    FORMAT_LINE_FOR_PRINT("Animal", "Weight"         ) << weight << endl ;

}

bool classAnimal::validate() const noexcept {

    assert( classNode::validate() ) ;
    assert( !getKingdom().empty() ) ;
    assert( validateClassification( getClassification() ) ) ;
    assert( validateSpecies( getSpecies() ) ) ;
    assert( weight.validate() ) ;

    return true ;

}
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Validation & Print //////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// Debug Print //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
void classAnimal::debugPrint() const noexcept {

    PRINT_HEADING_FOR_DEBUG_PRINT ;

    classNode::debugPrint() ;

    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "this"           ) << this << endl ;
    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "Kingdom"        ) << KINGDOM_NAME << endl ;
    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "Classification" ) << classification << endl ;
    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "Species"        ) << species << endl ;
    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "Gender"         ) << gender << endl ;
    FORMAT_LINE_FOR_DEBUG_PRINT("Animal", "Weight"         ) << weight << endl ;

}
//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// Debug Print //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////